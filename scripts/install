#!/bin/bash

# Exit on command errors and treat unset variables as an error
set -eu

app=$YNH_APP_INSTANCE_NAME

# Retrieve arguments
domain=$YNH_APP_ARG_DOMAIN
path=$YNH_APP_ARG_PATH

# Compute parameters
install_path="/home/ynh$app"

# Source YunoHost helpers
source /usr/share/yunohost/helpers

# Check domain/path availability
yunohost app checkurl "${domain}${path}" -a "$app" \
|| ynh_die "Path not available: ${domain}${path}"

# Check system user availability
if ynh_system_user_exists "$app" ; then
    ynh_die "System user $app already exists !"
fi

smtp_password=

if [ $YNH_APP_ARG_SETUP_EMAIL -eq 1 ]; then
    # Create a user with passwd
    smtp_password=$(dd if=/dev/urandom bs=1 count=200 2> /dev/null | tr -c -d 'A-Za-z0-9' | sed -n 's/\(.\{24\}\).*/\1/p')
    useradd -M --shell /bin/false -p $(openssl passwd -1 "$smtp_password") $app --home-dir $install_path || ynh_die "Failed to create user $app"
else
    ynh_system_user_create $app $install_path
fi
# Get port
port=$(ynh_find_port 9876)

# Create data/install forlder
sudo -u $app mkdir -p $install_path/data

# Add nodejs repo
apt-get -y install curl apt-transport-https ca-certificates
if $(uname -m | grep -Eq ^armv6); then
    # FIXME: We should not reinstall node if already there.
    NODE_URL="https://nodejs.org/dist/v6.12.3/node-v6.12.3-linux-armv6l.tar.xz"
    NODE_SHASUM="b092240b98465dfcfaff5ea7d5916128396bdf30e9e531c2f23034a3d75a700e"
    curl -s ${NODE_URL} -o /tmp/node.tar.xz
    computed_shasum=$(sha256sum /tmp/node.tar.xz | awk '{print $1}')
    if [ ${NODE_SHASUM} != ${computed_shasum} ]; then
        ynh_die "Downloaded node binary is invalid!"
    fi
    cd /tmp
    tar xvf node.tar.xz
    sudo cp -R node-v*-linux-armv6l/* /usr/
    rm -r node-v*-linux-armv6l*
else
    echo "deb https://deb.nodesource.com/node_6.x jessie main" > /etc/apt/sources.list.d/nodesource.list
    curl -s https://deb.nodesource.com/gpgkey/nodesource.gpg.key | apt-key add -

    # Add jessie-backports + debian keyring (necessary to get the signing key of packages from backports)
    apt-get -y install debian-archive-keyring
    echo "deb http://deb.debian.org/debian jessie-backports main" > /etc/apt/sources.list.d/backports.list

    # Install NodeJS
    apt-get update
    apt-get install -y nodejs
fi

# Install Python dependencies
apt-get install -y python-pip python-dev python-lxml python-imaging
# Force installation for backports (pip/weboob need the version from backoprts)
apt-get install -yq -t jessie-backports python-future python-six

pip install -U setuptools
pip install html2text simplejson BeautifulSoup PyExecJS unidecode

pip install weboob

# Install Kresus
sudo -u $app sh -c 'cd $final_path && prefix=$final_path npm install kresus'

# Modify Nginx configuration file and copy it to Nginx conf directory
nginx_conf=../conf/nginx.conf
sed -i "s@YNH_WWW_PATH@$path@g" $nginx_conf
sudo cp $nginx_conf /etc/nginx/conf.d/$domain.d/$app.conf

# Setup kresus
kresus_conf=../conf/config.ini
sed -i "s@YNH_DATA_DIR@$install_path@" $kresus_conf
sed -i "s@KRESUS_PATH@$path@" $kresus_conf
sed -i "s@YNH_APP_ARG_DOMAIN@$domain@" $kresus_conf
sed -i "s@YNH_USER@$app@" $kresus_conf
sed -i "s@YNH_PORT@$port@" $kresus_conf
sed -i "s@KRESUS_SMTP_PASSWORD@$smtp_password@" $kresus_conf

# Save conf to .yml
ynh_app_setting_set $app domain $domain
ynh_app_setting_set $app ynh_data_dir $install_path
ynh_app_setting_set $app path $path
ynh_app_setting_set $app user $app
ynh_app_setting_set $app port $port

# smtp_password won't be set if email emission is not configured
if [ $YNH_APP_ARG_SETUP_EMAIL -eq 1 ]; then
    ynh_app_setting_set $app smtp_password $smtp_password
fi

config_path=$install_path/config.ini
sudo -u $app cp $kresus_conf $config_path
# Make kresus config file read only.
sudo chmod 600 $config_path

# Setup service
systemd_service=../conf/kresus.service
sed -i "s@YNH_HOME@$install_path@g" $systemd_service
sed -i "s@YNH_CONFIG_PATH@$config_path@" $systemd_service
sed -i "s@YNH_USER@$app@" $systemd_service
sed -i "s@YNH_GROUP@$app@" $systemd_service

sudo cp $systemd_service /etc/systemd/system/$app.service
systemctl enable $app
systemctl start $app

# Reload services
sudo service nginx reload
